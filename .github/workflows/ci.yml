name: Continuous Integration (CI)

# Controls when the workflow will run
on:
  # Trigger the workflow manually
  workflow_dispatch:
  # Trigger on pushes to the main branch
  push:
    branches:
      - main
  # Trigger on pull requests targeting the main branch
  pull_request:
    branches:
      - main

# Cancel any previous runs for the same branch or PR that are still in progress
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Job to lint, test, and build the library across different Python versions
  lint_test_build:
    # Strategy to run the job on multiple Python versions
    strategy:
      fail-fast: false # Don't cancel all jobs if one Python version fails
      matrix:
        # Define the Python versions to test against
        # <<< Adjust these versions to match your 'requires-python' and 'classifiers' in pyproject.toml >>>
        python-version: [ '3.9', '3.10', '3.11' ]

    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up the specific Python version for this job instance
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Cache pip dependencies for faster installs
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # The directory to cache
          # Create a unique key based on OS, Python version, and pyproject.toml hash
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          # Restore cache if the key matches exactly or partially (only OS/Python)
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      # 4. Install dependencies using pyproject.toml
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          # Install the library itself in editable mode plus dev dependencies (includes test, linting, etc.)
          # <<< Ensure your pyproject.toml [project.optional-dependencies] defines 'dev' >>>
          python -m pip install --no-cache-dir .[dev]

      # 5. Lint with flake8
      - name: Lint with flake8
        run: |
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src --count --max-complexity=10 --max-line-length=127 --statistics

      # 6. Run Unit Tests with Coverage
      - name: Run unit tests with pytest
        run: |
          pytest -v \
          --cov=cba_core_lib \
          --cov-report=term-missing \
          --cov-branch \
          tests/unit

#      # 7. Run Integration Tests
#      - name: Run integration tests with pytest
#        run: |
#          pytest -v -m integration tests/integration
